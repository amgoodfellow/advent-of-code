* Day 9: Smoke Basin
*** Part 1

Per-usual, my initial thought is to do this the most straightforward way I can.

Iterate through the 2d array and for each element check to see if all adjacent elements are bigger

#+begin_src rust
fn part_one(map: Vec<Vec<usize>>) -> usize {
    let mut low_points = vec![];

    for row in 0..map.len() {
        for column in 0..map[0].len() {
            let current = map[row][column];
            let left = if column > 0 {
                map[row].get(column - 1).unwrap_or(&usize::max_value())
            } else {
                &usize::max_value()
            };
            let right = map[row].get(column + 1).unwrap_or(&usize::max_value());
            let above = if row > 0 {
                map.get(row - 1)
                    .and_then(|v| v.get(column))
                    .unwrap_or(&usize::max_value())
            } else {
                &usize::max_value()
            };
            let below = map
                .get(row + 1)
                .and_then(|v| v.get(column))
                .unwrap_or(&usize::max_value());

            if current < *left && current < *right && current < *above && current < *below {
                low_points.push(current.clone() + 1);
            }
        }
    }

    low_points.iter().sum()
}
#+end_src


*** Part 2
#+begin_src rust
#+end_src

