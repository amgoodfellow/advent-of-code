* Day 10: Syntax Scoring
*** Part 1


#+begin_src rust
fn part_one(input: Vec<Vec<char>>) -> usize {
    let mut bad_symbols = vec![];
    for line in input {
        let mut stack = VecDeque::new();
        for symbol in line.into_iter() {
            if !is_closing(symbol) {
                stack.push_back(symbol);
            } else {
                if let Some(last_char) = stack.pop_back() {
                    if !are_matching(last_char, symbol) {
                        bad_symbols.push(symbol);
                        break;
                    }
                } else {
                    bad_symbols.push(symbol);
                    break;
                }
            }
        }
    }

    bad_symbols
        .into_iter()
        .fold(0, |acc, symbol| acc + error_value(symbol))
}
#+end_src


*** Part 2
#+begin_src rust
fn part_two(input: Vec<Vec<char>>) -> usize {
    let mut missing_values = vec![];
    for line in input {
        let mut stack = VecDeque::new();
        for symbol in line.into_iter() {
            if !is_closing(symbol) {
                stack.push_back(symbol);
            } else {
                if let Some(last_char) = stack.pop_back() {
                    if !are_matching(last_char, symbol) {
                        stack.clear();
                        break;
                    }
                } else {
                    stack.clear();
                    break;
                }
            }
        }
        // The remaining elements in the stack are missing closing tags

        if stack.len() > 0 {
            let mut missing_sum = 0;

            while let Some(current) = stack.pop_back() {
                missing_sum = (missing_sum * 5) + missing_value(current);
            }

            missing_values.push(missing_sum);
        }
    }

    missing_values.sort();

    missing_values[missing_values.len() / 2]
}
#+end_src
